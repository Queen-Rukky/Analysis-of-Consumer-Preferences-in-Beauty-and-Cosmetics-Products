{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyODv5c6svhnv4O50MsQ6UaG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Queen-Rukky/Analysis-of-Consumer-Preferences-in-Beauty-and-Cosmetics-Products/blob/main/Crime%20Data%20from%202020%20till%20now\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "GW-0HxwRg4k8"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df= pd.read_csv('/content/Crime_Data_from_2020_to_Present.csv')"
      ],
      "metadata": {
        "id": "REkLaFIkhIgv"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "y92DQWmShgIR",
        "outputId": "1807cd59-470f-4d1d-e682-74012f415a0f"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            age  Sum of Crm Cd 1  Sum of Crm Cd 2  Sum of Crm Cd 3  \\\n",
              "0          -4-5        135037789         14935752         232455.0   \n",
              "1          6-15          9247484          2665895         315526.0   \n",
              "2         16-25         59630901          9163745         342103.0   \n",
              "3         26-35         99497462         13493183         487010.0   \n",
              "4         36-45         74486896         10001373         363779.0   \n",
              "5         46-55         54180727          7572278         293418.0   \n",
              "6         56-65         37460062          4962560         140891.0   \n",
              "7         66-75         17099667          2029792          60767.0   \n",
              "8         76-85          5548394           688216          19756.0   \n",
              "9         86-95          1238198           178416            998.0   \n",
              "10       96-105           301852            46366           3991.0   \n",
              "11      116-125              230              998              NaN   \n",
              "12  Grand Total        493729662         65738574        2260694.0   \n",
              "\n",
              "    Sum of Crm Cd 4  \n",
              "0            2994.0  \n",
              "1            7807.0  \n",
              "2            8982.0  \n",
              "3           14918.0  \n",
              "4            8914.0  \n",
              "5            8931.0  \n",
              "6            2907.0  \n",
              "7            1996.0  \n",
              "8            1996.0  \n",
              "9               NaN  \n",
              "10              NaN  \n",
              "11              NaN  \n",
              "12          59445.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9b8db629-88d9-4da2-abff-25f0a58a7f98\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <th>Sum of Crm Cd 2</th>\n",
              "      <th>Sum of Crm Cd 3</th>\n",
              "      <th>Sum of Crm Cd 4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-4-5</td>\n",
              "      <td>135037789</td>\n",
              "      <td>14935752</td>\n",
              "      <td>232455.0</td>\n",
              "      <td>2994.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6-15</td>\n",
              "      <td>9247484</td>\n",
              "      <td>2665895</td>\n",
              "      <td>315526.0</td>\n",
              "      <td>7807.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>16-25</td>\n",
              "      <td>59630901</td>\n",
              "      <td>9163745</td>\n",
              "      <td>342103.0</td>\n",
              "      <td>8982.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>26-35</td>\n",
              "      <td>99497462</td>\n",
              "      <td>13493183</td>\n",
              "      <td>487010.0</td>\n",
              "      <td>14918.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>36-45</td>\n",
              "      <td>74486896</td>\n",
              "      <td>10001373</td>\n",
              "      <td>363779.0</td>\n",
              "      <td>8914.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>46-55</td>\n",
              "      <td>54180727</td>\n",
              "      <td>7572278</td>\n",
              "      <td>293418.0</td>\n",
              "      <td>8931.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>56-65</td>\n",
              "      <td>37460062</td>\n",
              "      <td>4962560</td>\n",
              "      <td>140891.0</td>\n",
              "      <td>2907.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>66-75</td>\n",
              "      <td>17099667</td>\n",
              "      <td>2029792</td>\n",
              "      <td>60767.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>76-85</td>\n",
              "      <td>5548394</td>\n",
              "      <td>688216</td>\n",
              "      <td>19756.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>86-95</td>\n",
              "      <td>1238198</td>\n",
              "      <td>178416</td>\n",
              "      <td>998.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>96-105</td>\n",
              "      <td>301852</td>\n",
              "      <td>46366</td>\n",
              "      <td>3991.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>116-125</td>\n",
              "      <td>230</td>\n",
              "      <td>998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Grand Total</td>\n",
              "      <td>493729662</td>\n",
              "      <td>65738574</td>\n",
              "      <td>2260694.0</td>\n",
              "      <td>59445.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b8db629-88d9-4da2-abff-25f0a58a7f98')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9b8db629-88d9-4da2-abff-25f0a58a7f98 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9b8db629-88d9-4da2-abff-25f0a58a7f98');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f4a2d036-268f-4924-b3fc-e5823b8dbd4d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f4a2d036-268f-4924-b3fc-e5823b8dbd4d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f4a2d036-268f-4924-b3fc-e5823b8dbd4d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_5fe62e61-a319-41ee-8a0b-bbfbaf7a914d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5fe62e61-a319-41ee-8a0b-bbfbaf7a914d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"116-125\",\n          \"86-95\",\n          \"-4-5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132524010,\n        \"min\": 230,\n        \"max\": 493729662,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          230,\n          1238198,\n          135037789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17499273,\n        \"min\": 998,\n        \"max\": 65738574,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          998,\n          178416,\n          14935752\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 614768.4587680638,\n        \"min\": 998.0,\n        \"max\": 2260694.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          3991.0,\n          998.0,\n          232455.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17220.79487776979,\n        \"min\": 1996.0,\n        \"max\": 59445.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1996.0,\n          7807.0,\n          8931.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RfJeUa2XiU_y",
        "outputId": "a3b36a1c-91e9-4f8e-d284-9586d3b24d6e"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uQLuU8-uiazw",
        "outputId": "0b205f23-2d0f-4826-c017-ed5f2430a844"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 13 entries, 0 to 12\n",
            "Data columns (total 5 columns):\n",
            " #   Column           Non-Null Count  Dtype  \n",
            "---  ------           --------------  -----  \n",
            " 0   age              13 non-null     object \n",
            " 1   Sum of Crm Cd 1  13 non-null     int64  \n",
            " 2   Sum of Crm Cd 2  13 non-null     int64  \n",
            " 3   Sum of Crm Cd 3  12 non-null     float64\n",
            " 4   Sum of Crm Cd 4  10 non-null     float64\n",
            "dtypes: float64(2), int64(2), object(1)\n",
            "memory usage: 648.0+ bytes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().any()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "-MUd6WVuif4T",
        "outputId": "5ca188d2-6c30-4728-d259-ddf46f82157b"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "age                False\n",
              "Sum of Crm Cd 1    False\n",
              "Sum of Crm Cd 2    False\n",
              "Sum of Crm Cd 3     True\n",
              "Sum of Crm Cd 4     True\n",
              "dtype: bool"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sum of Crm Cd 2</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sum of Crm Cd 3</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sum of Crm Cd 4</th>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> bool</label>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "id": "2Q_ZMz1hivgh",
        "outputId": "9d71df20-387e-45c0-9bad-cd73ba4eef4f"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     False\n",
              "1     False\n",
              "2     False\n",
              "3     False\n",
              "4     False\n",
              "5     False\n",
              "6     False\n",
              "7     False\n",
              "8     False\n",
              "9     False\n",
              "10    False\n",
              "11    False\n",
              "12    False\n",
              "dtype: bool"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> bool</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.drop_duplicates()\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "sqH8j5r3i3aA",
        "outputId": "beb49f41-afb6-4bda-955c-38a36519207e"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            age  Sum of Crm Cd 1  Sum of Crm Cd 2  Sum of Crm Cd 3  \\\n",
              "0          -4-5        135037789         14935752         232455.0   \n",
              "1          6-15          9247484          2665895         315526.0   \n",
              "2         16-25         59630901          9163745         342103.0   \n",
              "3         26-35         99497462         13493183         487010.0   \n",
              "4         36-45         74486896         10001373         363779.0   \n",
              "5         46-55         54180727          7572278         293418.0   \n",
              "6         56-65         37460062          4962560         140891.0   \n",
              "7         66-75         17099667          2029792          60767.0   \n",
              "8         76-85          5548394           688216          19756.0   \n",
              "9         86-95          1238198           178416            998.0   \n",
              "10       96-105           301852            46366           3991.0   \n",
              "11      116-125              230              998              NaN   \n",
              "12  Grand Total        493729662         65738574        2260694.0   \n",
              "\n",
              "    Sum of Crm Cd 4  \n",
              "0            2994.0  \n",
              "1            7807.0  \n",
              "2            8982.0  \n",
              "3           14918.0  \n",
              "4            8914.0  \n",
              "5            8931.0  \n",
              "6            2907.0  \n",
              "7            1996.0  \n",
              "8            1996.0  \n",
              "9               NaN  \n",
              "10              NaN  \n",
              "11              NaN  \n",
              "12          59445.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3da961f2-6c30-4a84-8ccc-8e8cf4d2c6e5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <th>Sum of Crm Cd 2</th>\n",
              "      <th>Sum of Crm Cd 3</th>\n",
              "      <th>Sum of Crm Cd 4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-4-5</td>\n",
              "      <td>135037789</td>\n",
              "      <td>14935752</td>\n",
              "      <td>232455.0</td>\n",
              "      <td>2994.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6-15</td>\n",
              "      <td>9247484</td>\n",
              "      <td>2665895</td>\n",
              "      <td>315526.0</td>\n",
              "      <td>7807.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>16-25</td>\n",
              "      <td>59630901</td>\n",
              "      <td>9163745</td>\n",
              "      <td>342103.0</td>\n",
              "      <td>8982.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>26-35</td>\n",
              "      <td>99497462</td>\n",
              "      <td>13493183</td>\n",
              "      <td>487010.0</td>\n",
              "      <td>14918.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>36-45</td>\n",
              "      <td>74486896</td>\n",
              "      <td>10001373</td>\n",
              "      <td>363779.0</td>\n",
              "      <td>8914.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>46-55</td>\n",
              "      <td>54180727</td>\n",
              "      <td>7572278</td>\n",
              "      <td>293418.0</td>\n",
              "      <td>8931.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>56-65</td>\n",
              "      <td>37460062</td>\n",
              "      <td>4962560</td>\n",
              "      <td>140891.0</td>\n",
              "      <td>2907.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>66-75</td>\n",
              "      <td>17099667</td>\n",
              "      <td>2029792</td>\n",
              "      <td>60767.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>76-85</td>\n",
              "      <td>5548394</td>\n",
              "      <td>688216</td>\n",
              "      <td>19756.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>86-95</td>\n",
              "      <td>1238198</td>\n",
              "      <td>178416</td>\n",
              "      <td>998.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>96-105</td>\n",
              "      <td>301852</td>\n",
              "      <td>46366</td>\n",
              "      <td>3991.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>116-125</td>\n",
              "      <td>230</td>\n",
              "      <td>998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Grand Total</td>\n",
              "      <td>493729662</td>\n",
              "      <td>65738574</td>\n",
              "      <td>2260694.0</td>\n",
              "      <td>59445.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3da961f2-6c30-4a84-8ccc-8e8cf4d2c6e5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3da961f2-6c30-4a84-8ccc-8e8cf4d2c6e5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3da961f2-6c30-4a84-8ccc-8e8cf4d2c6e5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1785d347-8e25-414b-8cd2-039e5bd92daf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1785d347-8e25-414b-8cd2-039e5bd92daf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1785d347-8e25-414b-8cd2-039e5bd92daf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_04a25bcd-afb5-4103-9c29-82c591c3dc8a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_04a25bcd-afb5-4103-9c29-82c591c3dc8a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"116-125\",\n          \"86-95\",\n          \"-4-5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132524010,\n        \"min\": 230,\n        \"max\": 493729662,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          230,\n          1238198,\n          135037789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17499273,\n        \"min\": 998,\n        \"max\": 65738574,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          998,\n          178416,\n          14935752\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 614768.4587680638,\n        \"min\": 998.0,\n        \"max\": 2260694.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          3991.0,\n          998.0,\n          232455.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17220.79487776979,\n        \"min\": 1996.0,\n        \"max\": 59445.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1996.0,\n          7807.0,\n          8931.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2= df.set_index('age')# to set age as index\n",
        "df2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "wpPH21Bgly45",
        "outputId": "f46ef157-b94c-4b57-fa8b-33492359a885"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Sum of Crm Cd 1  Sum of Crm Cd 2  Sum of Crm Cd 3  \\\n",
              "age                                                              \n",
              "-4-5               135037789         14935752         232455.0   \n",
              "6-15                 9247484          2665895         315526.0   \n",
              "16-25               59630901          9163745         342103.0   \n",
              "26-35               99497462         13493183         487010.0   \n",
              "36-45               74486896         10001373         363779.0   \n",
              "46-55               54180727          7572278         293418.0   \n",
              "56-65               37460062          4962560         140891.0   \n",
              "66-75               17099667          2029792          60767.0   \n",
              "76-85                5548394           688216          19756.0   \n",
              "86-95                1238198           178416            998.0   \n",
              "96-105                301852            46366           3991.0   \n",
              "116-125                  230              998              NaN   \n",
              "Grand Total        493729662         65738574        2260694.0   \n",
              "\n",
              "             Sum of Crm Cd 4  \n",
              "age                           \n",
              "-4-5                  2994.0  \n",
              "6-15                  7807.0  \n",
              "16-25                 8982.0  \n",
              "26-35                14918.0  \n",
              "36-45                 8914.0  \n",
              "46-55                 8931.0  \n",
              "56-65                 2907.0  \n",
              "66-75                 1996.0  \n",
              "76-85                 1996.0  \n",
              "86-95                    NaN  \n",
              "96-105                   NaN  \n",
              "116-125                  NaN  \n",
              "Grand Total          59445.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2f8e330b-7bdc-41f8-bc32-3cf77c10f37d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <th>Sum of Crm Cd 2</th>\n",
              "      <th>Sum of Crm Cd 3</th>\n",
              "      <th>Sum of Crm Cd 4</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>-4-5</th>\n",
              "      <td>135037789</td>\n",
              "      <td>14935752</td>\n",
              "      <td>232455.0</td>\n",
              "      <td>2994.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6-15</th>\n",
              "      <td>9247484</td>\n",
              "      <td>2665895</td>\n",
              "      <td>315526.0</td>\n",
              "      <td>7807.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16-25</th>\n",
              "      <td>59630901</td>\n",
              "      <td>9163745</td>\n",
              "      <td>342103.0</td>\n",
              "      <td>8982.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26-35</th>\n",
              "      <td>99497462</td>\n",
              "      <td>13493183</td>\n",
              "      <td>487010.0</td>\n",
              "      <td>14918.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36-45</th>\n",
              "      <td>74486896</td>\n",
              "      <td>10001373</td>\n",
              "      <td>363779.0</td>\n",
              "      <td>8914.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46-55</th>\n",
              "      <td>54180727</td>\n",
              "      <td>7572278</td>\n",
              "      <td>293418.0</td>\n",
              "      <td>8931.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56-65</th>\n",
              "      <td>37460062</td>\n",
              "      <td>4962560</td>\n",
              "      <td>140891.0</td>\n",
              "      <td>2907.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66-75</th>\n",
              "      <td>17099667</td>\n",
              "      <td>2029792</td>\n",
              "      <td>60767.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76-85</th>\n",
              "      <td>5548394</td>\n",
              "      <td>688216</td>\n",
              "      <td>19756.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86-95</th>\n",
              "      <td>1238198</td>\n",
              "      <td>178416</td>\n",
              "      <td>998.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96-105</th>\n",
              "      <td>301852</td>\n",
              "      <td>46366</td>\n",
              "      <td>3991.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116-125</th>\n",
              "      <td>230</td>\n",
              "      <td>998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Grand Total</th>\n",
              "      <td>493729662</td>\n",
              "      <td>65738574</td>\n",
              "      <td>2260694.0</td>\n",
              "      <td>59445.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f8e330b-7bdc-41f8-bc32-3cf77c10f37d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2f8e330b-7bdc-41f8-bc32-3cf77c10f37d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2f8e330b-7bdc-41f8-bc32-3cf77c10f37d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-46e01a4b-a90e-4109-993d-5fac92053908\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46e01a4b-a90e-4109-993d-5fac92053908')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-46e01a4b-a90e-4109-993d-5fac92053908 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_5532de44-e947-418e-b147-d45f85e2c2fc\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5532de44-e947-418e-b147-d45f85e2c2fc button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"116-125\",\n          \"86-95\",\n          \"-4-5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132524010,\n        \"min\": 230,\n        \"max\": 493729662,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          230,\n          1238198,\n          135037789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17499273,\n        \"min\": 998,\n        \"max\": 65738574,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          998,\n          178416,\n          14935752\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 614768.4587680638,\n        \"min\": 998.0,\n        \"max\": 2260694.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          3991.0,\n          998.0,\n          232455.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17220.79487776979,\n        \"min\": 1996.0,\n        \"max\": 59445.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1996.0,\n          7807.0,\n          8931.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[df['age'].str.contains('-4-5')] #check age range of -4-5 in aage coln"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "_mDdG0qPjFCo",
        "outputId": "a1278677-2836-4fe3-f56d-eb7c3bccc8a2"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    age  Sum of Crm Cd 1  Sum of Crm Cd 2  Sum of Crm Cd 3  Sum of Crm Cd 4\n",
              "0  -4-5        135037789         14935752         232455.0           2994.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7605b58a-3765-4d33-9f5e-2b51c6d17104\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <th>Sum of Crm Cd 2</th>\n",
              "      <th>Sum of Crm Cd 3</th>\n",
              "      <th>Sum of Crm Cd 4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-4-5</td>\n",
              "      <td>135037789</td>\n",
              "      <td>14935752</td>\n",
              "      <td>232455.0</td>\n",
              "      <td>2994.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7605b58a-3765-4d33-9f5e-2b51c6d17104')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7605b58a-3765-4d33-9f5e-2b51c6d17104 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7605b58a-3765-4d33-9f5e-2b51c6d17104');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['age']\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"-4-5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 135037789,\n        \"max\": 135037789,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          135037789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 14935752,\n        \"max\": 14935752,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          14935752\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 232455.0,\n        \"max\": 232455.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          232455.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2994.0,\n        \"max\": 2994.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2994.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kczu4895nDR4",
        "outputId": "b06bd63c-ee55-445b-aba9-9b87722d521c"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Sum of Crm Cd 1', 'Sum of Crm Cd 2', 'Sum of Crm Cd 3',\n",
              "       'Sum of Crm Cd 4'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.rename(columns ={'Sum of Crm Cd 1':'Crime Cd 1', 'Sum of Crm Cd 2':'Crime Cd 2', 'Sum of Crm Cd 3':'Crime Cd 3',\n",
        "       'Sum of Crm Cd 4':'Crime Cd 4'})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "-9sxnKj9n0XD",
        "outputId": "45043968-b608-45a8-c5b6-679fc3ed8645"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Crime Cd 1  Crime Cd 2  Crime Cd 3  Crime Cd 4\n",
              "age                                                        \n",
              "-4-5          135037789    14935752    232455.0      2994.0\n",
              "6-15            9247484     2665895    315526.0      7807.0\n",
              "16-25          59630901     9163745    342103.0      8982.0\n",
              "26-35          99497462    13493183    487010.0     14918.0\n",
              "36-45          74486896    10001373    363779.0      8914.0\n",
              "46-55          54180727     7572278    293418.0      8931.0\n",
              "56-65          37460062     4962560    140891.0      2907.0\n",
              "66-75          17099667     2029792     60767.0      1996.0\n",
              "76-85           5548394      688216     19756.0      1996.0\n",
              "86-95           1238198      178416       998.0         NaN\n",
              "96-105           301852       46366      3991.0         NaN\n",
              "116-125             230         998         NaN         NaN\n",
              "Grand Total   493729662    65738574   2260694.0     59445.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7bfcc175-1ff6-4ca5-81c7-b5f06b9d1e4c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Crime Cd 1</th>\n",
              "      <th>Crime Cd 2</th>\n",
              "      <th>Crime Cd 3</th>\n",
              "      <th>Crime Cd 4</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>-4-5</th>\n",
              "      <td>135037789</td>\n",
              "      <td>14935752</td>\n",
              "      <td>232455.0</td>\n",
              "      <td>2994.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6-15</th>\n",
              "      <td>9247484</td>\n",
              "      <td>2665895</td>\n",
              "      <td>315526.0</td>\n",
              "      <td>7807.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16-25</th>\n",
              "      <td>59630901</td>\n",
              "      <td>9163745</td>\n",
              "      <td>342103.0</td>\n",
              "      <td>8982.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26-35</th>\n",
              "      <td>99497462</td>\n",
              "      <td>13493183</td>\n",
              "      <td>487010.0</td>\n",
              "      <td>14918.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36-45</th>\n",
              "      <td>74486896</td>\n",
              "      <td>10001373</td>\n",
              "      <td>363779.0</td>\n",
              "      <td>8914.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46-55</th>\n",
              "      <td>54180727</td>\n",
              "      <td>7572278</td>\n",
              "      <td>293418.0</td>\n",
              "      <td>8931.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56-65</th>\n",
              "      <td>37460062</td>\n",
              "      <td>4962560</td>\n",
              "      <td>140891.0</td>\n",
              "      <td>2907.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66-75</th>\n",
              "      <td>17099667</td>\n",
              "      <td>2029792</td>\n",
              "      <td>60767.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76-85</th>\n",
              "      <td>5548394</td>\n",
              "      <td>688216</td>\n",
              "      <td>19756.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86-95</th>\n",
              "      <td>1238198</td>\n",
              "      <td>178416</td>\n",
              "      <td>998.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96-105</th>\n",
              "      <td>301852</td>\n",
              "      <td>46366</td>\n",
              "      <td>3991.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116-125</th>\n",
              "      <td>230</td>\n",
              "      <td>998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Grand Total</th>\n",
              "      <td>493729662</td>\n",
              "      <td>65738574</td>\n",
              "      <td>2260694.0</td>\n",
              "      <td>59445.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7bfcc175-1ff6-4ca5-81c7-b5f06b9d1e4c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7bfcc175-1ff6-4ca5-81c7-b5f06b9d1e4c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7bfcc175-1ff6-4ca5-81c7-b5f06b9d1e4c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-19a28332-cb0e-41dd-94e3-157bd8c062da\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-19a28332-cb0e-41dd-94e3-157bd8c062da')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-19a28332-cb0e-41dd-94e3-157bd8c062da button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"       'Sum of Crm Cd 4':'Crime Cd 4'})\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"116-125\",\n          \"86-95\",\n          \"-4-5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Crime Cd 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132524010,\n        \"min\": 230,\n        \"max\": 493729662,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          230,\n          1238198,\n          135037789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Crime Cd 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17499273,\n        \"min\": 998,\n        \"max\": 65738574,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          998,\n          178416,\n          14935752\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Crime Cd 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 614768.4587680638,\n        \"min\": 998.0,\n        \"max\": 2260694.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          3991.0,\n          998.0,\n          232455.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Crime Cd 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17220.79487776979,\n        \"min\": 1996.0,\n        \"max\": 59445.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1996.0,\n          7807.0,\n          8931.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.loc['56-65']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        },
        "id": "AxyDoJ-wsPp6",
        "outputId": "1a1a93f4-292b-46f4-9617-35e7c600b651"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Sum of Crm Cd 1    37460062.0\n",
              "Sum of Crm Cd 2     4962560.0\n",
              "Sum of Crm Cd 3      140891.0\n",
              "Sum of Crm Cd 4        2907.0\n",
              "Name: 56-65, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>56-65</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <td>37460062.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sum of Crm Cd 2</th>\n",
              "      <td>4962560.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sum of Crm Cd 3</th>\n",
              "      <td>140891.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sum of Crm Cd 4</th>\n",
              "      <td>2907.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.groupby('age').count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "JcMEffV9vTK7",
        "outputId": "76a0bfd2-a7e2-4e5a-aeda-8a571e426192"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Sum of Crm Cd 1  Sum of Crm Cd 2  Sum of Crm Cd 3  \\\n",
              "age                                                              \n",
              "-4-5                       1                1                1   \n",
              "116-125                    1                1                0   \n",
              "16-25                      1                1                1   \n",
              "26-35                      1                1                1   \n",
              "36-45                      1                1                1   \n",
              "46-55                      1                1                1   \n",
              "56-65                      1                1                1   \n",
              "6-15                       1                1                1   \n",
              "66-75                      1                1                1   \n",
              "76-85                      1                1                1   \n",
              "86-95                      1                1                1   \n",
              "96-105                     1                1                1   \n",
              "Grand Total                1                1                1   \n",
              "\n",
              "             Sum of Crm Cd 4  \n",
              "age                           \n",
              "-4-5                       1  \n",
              "116-125                    0  \n",
              "16-25                      1  \n",
              "26-35                      1  \n",
              "36-45                      1  \n",
              "46-55                      1  \n",
              "56-65                      1  \n",
              "6-15                       1  \n",
              "66-75                      1  \n",
              "76-85                      1  \n",
              "86-95                      0  \n",
              "96-105                     0  \n",
              "Grand Total                1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-222b2efd-238e-458d-a880-2f718576ce48\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <th>Sum of Crm Cd 2</th>\n",
              "      <th>Sum of Crm Cd 3</th>\n",
              "      <th>Sum of Crm Cd 4</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>-4-5</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116-125</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16-25</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26-35</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36-45</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46-55</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56-65</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6-15</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66-75</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76-85</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86-95</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96-105</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Grand Total</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-222b2efd-238e-458d-a880-2f718576ce48')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-222b2efd-238e-458d-a880-2f718576ce48 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-222b2efd-238e-458d-a880-2f718576ce48');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0e734e22-038f-4210-8176-4a9feb8540f7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0e734e22-038f-4210-8176-4a9feb8540f7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0e734e22-038f-4210-8176-4a9feb8540f7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"96-105\",\n          \"76-85\",\n          \"-4-5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.groupby('age').max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "5vxZoOYQKsLN",
        "outputId": "fd978786-a904-45b3-bddc-2686fdbae2ff"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Sum of Crm Cd 1  Sum of Crm Cd 2  Sum of Crm Cd 3  \\\n",
              "age                                                              \n",
              "-4-5               135037789         14935752         232455.0   \n",
              "116-125                  230              998              NaN   \n",
              "16-25               59630901          9163745         342103.0   \n",
              "26-35               99497462         13493183         487010.0   \n",
              "36-45               74486896         10001373         363779.0   \n",
              "46-55               54180727          7572278         293418.0   \n",
              "56-65               37460062          4962560         140891.0   \n",
              "6-15                 9247484          2665895         315526.0   \n",
              "66-75               17099667          2029792          60767.0   \n",
              "76-85                5548394           688216          19756.0   \n",
              "86-95                1238198           178416            998.0   \n",
              "96-105                301852            46366           3991.0   \n",
              "Grand Total        493729662         65738574        2260694.0   \n",
              "\n",
              "             Sum of Crm Cd 4  \n",
              "age                           \n",
              "-4-5                  2994.0  \n",
              "116-125                  NaN  \n",
              "16-25                 8982.0  \n",
              "26-35                14918.0  \n",
              "36-45                 8914.0  \n",
              "46-55                 8931.0  \n",
              "56-65                 2907.0  \n",
              "6-15                  7807.0  \n",
              "66-75                 1996.0  \n",
              "76-85                 1996.0  \n",
              "86-95                    NaN  \n",
              "96-105                   NaN  \n",
              "Grand Total          59445.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8f8080c6-88b7-4058-a3ee-da73243ba5b0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <th>Sum of Crm Cd 2</th>\n",
              "      <th>Sum of Crm Cd 3</th>\n",
              "      <th>Sum of Crm Cd 4</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>-4-5</th>\n",
              "      <td>135037789</td>\n",
              "      <td>14935752</td>\n",
              "      <td>232455.0</td>\n",
              "      <td>2994.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116-125</th>\n",
              "      <td>230</td>\n",
              "      <td>998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16-25</th>\n",
              "      <td>59630901</td>\n",
              "      <td>9163745</td>\n",
              "      <td>342103.0</td>\n",
              "      <td>8982.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26-35</th>\n",
              "      <td>99497462</td>\n",
              "      <td>13493183</td>\n",
              "      <td>487010.0</td>\n",
              "      <td>14918.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36-45</th>\n",
              "      <td>74486896</td>\n",
              "      <td>10001373</td>\n",
              "      <td>363779.0</td>\n",
              "      <td>8914.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46-55</th>\n",
              "      <td>54180727</td>\n",
              "      <td>7572278</td>\n",
              "      <td>293418.0</td>\n",
              "      <td>8931.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56-65</th>\n",
              "      <td>37460062</td>\n",
              "      <td>4962560</td>\n",
              "      <td>140891.0</td>\n",
              "      <td>2907.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6-15</th>\n",
              "      <td>9247484</td>\n",
              "      <td>2665895</td>\n",
              "      <td>315526.0</td>\n",
              "      <td>7807.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66-75</th>\n",
              "      <td>17099667</td>\n",
              "      <td>2029792</td>\n",
              "      <td>60767.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76-85</th>\n",
              "      <td>5548394</td>\n",
              "      <td>688216</td>\n",
              "      <td>19756.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86-95</th>\n",
              "      <td>1238198</td>\n",
              "      <td>178416</td>\n",
              "      <td>998.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96-105</th>\n",
              "      <td>301852</td>\n",
              "      <td>46366</td>\n",
              "      <td>3991.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Grand Total</th>\n",
              "      <td>493729662</td>\n",
              "      <td>65738574</td>\n",
              "      <td>2260694.0</td>\n",
              "      <td>59445.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f8080c6-88b7-4058-a3ee-da73243ba5b0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8f8080c6-88b7-4058-a3ee-da73243ba5b0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8f8080c6-88b7-4058-a3ee-da73243ba5b0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-da20346e-31c7-46ca-b09a-91e0e16385a8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-da20346e-31c7-46ca-b09a-91e0e16385a8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-da20346e-31c7-46ca-b09a-91e0e16385a8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"96-105\",\n          \"76-85\",\n          \"-4-5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132524010,\n        \"min\": 230,\n        \"max\": 493729662,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          301852,\n          5548394,\n          135037789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17499273,\n        \"min\": 998,\n        \"max\": 65738574,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          46366,\n          688216,\n          14935752\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 614768.4587680638,\n        \"min\": 998.0,\n        \"max\": 2260694.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          3991.0,\n          998.0,\n          232455.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17220.79487776979,\n        \"min\": 1996.0,\n        \"max\": 59445.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1996.0,\n          8982.0,\n          2907.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.groupby('Sum of Crm Cd 1').max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "k1j-nr-dMmv6",
        "outputId": "ea39f837-08ac-4397-8ac9-b282fb996de8"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Sum of Crm Cd 2  Sum of Crm Cd 3  Sum of Crm Cd 4\n",
              "Sum of Crm Cd 1                                                   \n",
              "230                          998              NaN              NaN\n",
              "301852                     46366           3991.0              NaN\n",
              "1238198                   178416            998.0              NaN\n",
              "5548394                   688216          19756.0           1996.0\n",
              "9247484                  2665895         315526.0           7807.0\n",
              "17099667                 2029792          60767.0           1996.0\n",
              "37460062                 4962560         140891.0           2907.0\n",
              "54180727                 7572278         293418.0           8931.0\n",
              "59630901                 9163745         342103.0           8982.0\n",
              "74486896                10001373         363779.0           8914.0\n",
              "99497462                13493183         487010.0          14918.0\n",
              "135037789               14935752         232455.0           2994.0\n",
              "493729662               65738574        2260694.0          59445.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-75a1a97b-902a-426f-bd53-f2305513ff2a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sum of Crm Cd 2</th>\n",
              "      <th>Sum of Crm Cd 3</th>\n",
              "      <th>Sum of Crm Cd 4</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>230</th>\n",
              "      <td>998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>301852</th>\n",
              "      <td>46366</td>\n",
              "      <td>3991.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1238198</th>\n",
              "      <td>178416</td>\n",
              "      <td>998.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5548394</th>\n",
              "      <td>688216</td>\n",
              "      <td>19756.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9247484</th>\n",
              "      <td>2665895</td>\n",
              "      <td>315526.0</td>\n",
              "      <td>7807.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17099667</th>\n",
              "      <td>2029792</td>\n",
              "      <td>60767.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37460062</th>\n",
              "      <td>4962560</td>\n",
              "      <td>140891.0</td>\n",
              "      <td>2907.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54180727</th>\n",
              "      <td>7572278</td>\n",
              "      <td>293418.0</td>\n",
              "      <td>8931.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59630901</th>\n",
              "      <td>9163745</td>\n",
              "      <td>342103.0</td>\n",
              "      <td>8982.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74486896</th>\n",
              "      <td>10001373</td>\n",
              "      <td>363779.0</td>\n",
              "      <td>8914.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99497462</th>\n",
              "      <td>13493183</td>\n",
              "      <td>487010.0</td>\n",
              "      <td>14918.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>135037789</th>\n",
              "      <td>14935752</td>\n",
              "      <td>232455.0</td>\n",
              "      <td>2994.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>493729662</th>\n",
              "      <td>65738574</td>\n",
              "      <td>2260694.0</td>\n",
              "      <td>59445.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75a1a97b-902a-426f-bd53-f2305513ff2a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-75a1a97b-902a-426f-bd53-f2305513ff2a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-75a1a97b-902a-426f-bd53-f2305513ff2a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-302e9101-da85-44b2-b137-58b101384acb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-302e9101-da85-44b2-b137-58b101384acb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-302e9101-da85-44b2-b137-58b101384acb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"Sum of Crm Cd 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132524010,\n        \"min\": 230,\n        \"max\": 493729662,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          135037789,\n          74486896,\n          230\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17499273,\n        \"min\": 998,\n        \"max\": 65738574,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          14935752,\n          10001373,\n          998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 614768.4587680638,\n        \"min\": 998.0,\n        \"max\": 2260694.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          232455.0,\n          487010.0,\n          3991.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17220.79487776979,\n        \"min\": 1996.0,\n        \"max\": 59445.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          2994.0,\n          7807.0,\n          8914.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2.groupby('Sum of Crm Cd 1').agg({'Sum of Crm Cd 1':['mean','max','min','count']})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "yp2SVqJtNUGE",
        "outputId": "2dcc5a7b-2a92-4475-8ad5-d8a82ec67abb"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Sum of Crm Cd 1                            \n",
              "                           mean        max        min count\n",
              "Sum of Crm Cd 1                                            \n",
              "230                       230.0        230        230     1\n",
              "301852                 301852.0     301852     301852     1\n",
              "1238198               1238198.0    1238198    1238198     1\n",
              "5548394               5548394.0    5548394    5548394     1\n",
              "9247484               9247484.0    9247484    9247484     1\n",
              "17099667             17099667.0   17099667   17099667     1\n",
              "37460062             37460062.0   37460062   37460062     1\n",
              "54180727             54180727.0   54180727   54180727     1\n",
              "59630901             59630901.0   59630901   59630901     1\n",
              "74486896             74486896.0   74486896   74486896     1\n",
              "99497462             99497462.0   99497462   99497462     1\n",
              "135037789           135037789.0  135037789  135037789     1\n",
              "493729662           493729662.0  493729662  493729662     1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2bc76b1e-ae75-4871-b57a-b83c2ea4fe17\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"4\" halign=\"left\">Sum of Crm Cd 1</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>mean</th>\n",
              "      <th>max</th>\n",
              "      <th>min</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>230</th>\n",
              "      <td>230.0</td>\n",
              "      <td>230</td>\n",
              "      <td>230</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>301852</th>\n",
              "      <td>301852.0</td>\n",
              "      <td>301852</td>\n",
              "      <td>301852</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1238198</th>\n",
              "      <td>1238198.0</td>\n",
              "      <td>1238198</td>\n",
              "      <td>1238198</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5548394</th>\n",
              "      <td>5548394.0</td>\n",
              "      <td>5548394</td>\n",
              "      <td>5548394</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9247484</th>\n",
              "      <td>9247484.0</td>\n",
              "      <td>9247484</td>\n",
              "      <td>9247484</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17099667</th>\n",
              "      <td>17099667.0</td>\n",
              "      <td>17099667</td>\n",
              "      <td>17099667</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37460062</th>\n",
              "      <td>37460062.0</td>\n",
              "      <td>37460062</td>\n",
              "      <td>37460062</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54180727</th>\n",
              "      <td>54180727.0</td>\n",
              "      <td>54180727</td>\n",
              "      <td>54180727</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59630901</th>\n",
              "      <td>59630901.0</td>\n",
              "      <td>59630901</td>\n",
              "      <td>59630901</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74486896</th>\n",
              "      <td>74486896.0</td>\n",
              "      <td>74486896</td>\n",
              "      <td>74486896</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99497462</th>\n",
              "      <td>99497462.0</td>\n",
              "      <td>99497462</td>\n",
              "      <td>99497462</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>135037789</th>\n",
              "      <td>135037789.0</td>\n",
              "      <td>135037789</td>\n",
              "      <td>135037789</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>493729662</th>\n",
              "      <td>493729662.0</td>\n",
              "      <td>493729662</td>\n",
              "      <td>493729662</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2bc76b1e-ae75-4871-b57a-b83c2ea4fe17')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2bc76b1e-ae75-4871-b57a-b83c2ea4fe17 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2bc76b1e-ae75-4871-b57a-b83c2ea4fe17');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-301c9e2b-5a99-4b4d-a30a-ad200503c2dd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-301c9e2b-5a99-4b4d-a30a-ad200503c2dd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-301c9e2b-5a99-4b4d-a30a-ad200503c2dd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Sum of Crm Cd 1\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132524010,\n        \"min\": 230,\n        \"max\": 493729662,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          135037789,\n          74486896,\n          230\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Sum of Crm Cd 1\",\n        \"mean\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132524010.95524451,\n        \"min\": 230.0,\n        \"max\": 493729662.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          135037789.0,\n          74486896.0,\n          230.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Sum of Crm Cd 1\",\n        \"max\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132524010,\n        \"min\": 230,\n        \"max\": 493729662,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          135037789,\n          74486896,\n          230\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Sum of Crm Cd 1\",\n        \"min\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132524010,\n        \"min\": 230,\n        \"max\": 493729662,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          135037789,\n          74486896,\n          230\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Sum of Crm Cd 1\",\n        \"count\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "9kzUjRJGkGrZ",
        "outputId": "ccfe3c09-0b10-4357-aca1-80938cf293b8"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Sum of Crm Cd 1  Sum of Crm Cd 2  Sum of Crm Cd 3  \\\n",
              "age                                                              \n",
              "-4-5               135037789         14935752         232455.0   \n",
              "6-15                 9247484          2665895         315526.0   \n",
              "16-25               59630901          9163745         342103.0   \n",
              "26-35               99497462         13493183         487010.0   \n",
              "36-45               74486896         10001373         363779.0   \n",
              "46-55               54180727          7572278         293418.0   \n",
              "56-65               37460062          4962560         140891.0   \n",
              "66-75               17099667          2029792          60767.0   \n",
              "76-85                5548394           688216          19756.0   \n",
              "86-95                1238198           178416            998.0   \n",
              "96-105                301852            46366           3991.0   \n",
              "116-125                  230              998              NaN   \n",
              "Grand Total        493729662         65738574        2260694.0   \n",
              "\n",
              "             Sum of Crm Cd 4  \n",
              "age                           \n",
              "-4-5                  2994.0  \n",
              "6-15                  7807.0  \n",
              "16-25                 8982.0  \n",
              "26-35                14918.0  \n",
              "36-45                 8914.0  \n",
              "46-55                 8931.0  \n",
              "56-65                 2907.0  \n",
              "66-75                 1996.0  \n",
              "76-85                 1996.0  \n",
              "86-95                    NaN  \n",
              "96-105                   NaN  \n",
              "116-125                  NaN  \n",
              "Grand Total          59445.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-557828e3-6e7f-46dd-a19e-f57add1b0133\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <th>Sum of Crm Cd 2</th>\n",
              "      <th>Sum of Crm Cd 3</th>\n",
              "      <th>Sum of Crm Cd 4</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>-4-5</th>\n",
              "      <td>135037789</td>\n",
              "      <td>14935752</td>\n",
              "      <td>232455.0</td>\n",
              "      <td>2994.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6-15</th>\n",
              "      <td>9247484</td>\n",
              "      <td>2665895</td>\n",
              "      <td>315526.0</td>\n",
              "      <td>7807.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16-25</th>\n",
              "      <td>59630901</td>\n",
              "      <td>9163745</td>\n",
              "      <td>342103.0</td>\n",
              "      <td>8982.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26-35</th>\n",
              "      <td>99497462</td>\n",
              "      <td>13493183</td>\n",
              "      <td>487010.0</td>\n",
              "      <td>14918.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36-45</th>\n",
              "      <td>74486896</td>\n",
              "      <td>10001373</td>\n",
              "      <td>363779.0</td>\n",
              "      <td>8914.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46-55</th>\n",
              "      <td>54180727</td>\n",
              "      <td>7572278</td>\n",
              "      <td>293418.0</td>\n",
              "      <td>8931.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56-65</th>\n",
              "      <td>37460062</td>\n",
              "      <td>4962560</td>\n",
              "      <td>140891.0</td>\n",
              "      <td>2907.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66-75</th>\n",
              "      <td>17099667</td>\n",
              "      <td>2029792</td>\n",
              "      <td>60767.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76-85</th>\n",
              "      <td>5548394</td>\n",
              "      <td>688216</td>\n",
              "      <td>19756.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86-95</th>\n",
              "      <td>1238198</td>\n",
              "      <td>178416</td>\n",
              "      <td>998.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96-105</th>\n",
              "      <td>301852</td>\n",
              "      <td>46366</td>\n",
              "      <td>3991.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116-125</th>\n",
              "      <td>230</td>\n",
              "      <td>998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Grand Total</th>\n",
              "      <td>493729662</td>\n",
              "      <td>65738574</td>\n",
              "      <td>2260694.0</td>\n",
              "      <td>59445.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-557828e3-6e7f-46dd-a19e-f57add1b0133')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-557828e3-6e7f-46dd-a19e-f57add1b0133 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-557828e3-6e7f-46dd-a19e-f57add1b0133');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5fbb6fb9-c048-485e-9d3b-6f40ccdbc1d0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5fbb6fb9-c048-485e-9d3b-6f40ccdbc1d0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5fbb6fb9-c048-485e-9d3b-6f40ccdbc1d0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_1c635195-281a-4290-9030-225a7abb98bc\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1c635195-281a-4290-9030-225a7abb98bc button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"116-125\",\n          \"86-95\",\n          \"-4-5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132524010,\n        \"min\": 230,\n        \"max\": 493729662,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          230,\n          1238198,\n          135037789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17499273,\n        \"min\": 998,\n        \"max\": 65738574,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          998,\n          178416,\n          14935752\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 614768.4587680638,\n        \"min\": 998.0,\n        \"max\": 2260694.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          3991.0,\n          998.0,\n          232455.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17220.79487776979,\n        \"min\": 1996.0,\n        \"max\": 59445.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1996.0,\n          7807.0,\n          8931.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3= df2.drop(['Grand Total'],axis=0)\n",
        "df3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "IlcGDosp1AKw",
        "outputId": "6e3e9ec8-5211-4a42-af42-7988d5af15d0"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Sum of Crm Cd 1  Sum of Crm Cd 2  Sum of Crm Cd 3  Sum of Crm Cd 4\n",
              "age                                                                        \n",
              "-4-5           135037789         14935752         232455.0           2994.0\n",
              "6-15             9247484          2665895         315526.0           7807.0\n",
              "16-25           59630901          9163745         342103.0           8982.0\n",
              "26-35           99497462         13493183         487010.0          14918.0\n",
              "36-45           74486896         10001373         363779.0           8914.0\n",
              "46-55           54180727          7572278         293418.0           8931.0\n",
              "56-65           37460062          4962560         140891.0           2907.0\n",
              "66-75           17099667          2029792          60767.0           1996.0\n",
              "76-85            5548394           688216          19756.0           1996.0\n",
              "86-95            1238198           178416            998.0              NaN\n",
              "96-105            301852            46366           3991.0              NaN\n",
              "116-125              230              998              NaN              NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d63fdc35-5825-4d7d-972c-9718aa9a3cb8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sum of Crm Cd 1</th>\n",
              "      <th>Sum of Crm Cd 2</th>\n",
              "      <th>Sum of Crm Cd 3</th>\n",
              "      <th>Sum of Crm Cd 4</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>-4-5</th>\n",
              "      <td>135037789</td>\n",
              "      <td>14935752</td>\n",
              "      <td>232455.0</td>\n",
              "      <td>2994.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6-15</th>\n",
              "      <td>9247484</td>\n",
              "      <td>2665895</td>\n",
              "      <td>315526.0</td>\n",
              "      <td>7807.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16-25</th>\n",
              "      <td>59630901</td>\n",
              "      <td>9163745</td>\n",
              "      <td>342103.0</td>\n",
              "      <td>8982.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26-35</th>\n",
              "      <td>99497462</td>\n",
              "      <td>13493183</td>\n",
              "      <td>487010.0</td>\n",
              "      <td>14918.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36-45</th>\n",
              "      <td>74486896</td>\n",
              "      <td>10001373</td>\n",
              "      <td>363779.0</td>\n",
              "      <td>8914.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46-55</th>\n",
              "      <td>54180727</td>\n",
              "      <td>7572278</td>\n",
              "      <td>293418.0</td>\n",
              "      <td>8931.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56-65</th>\n",
              "      <td>37460062</td>\n",
              "      <td>4962560</td>\n",
              "      <td>140891.0</td>\n",
              "      <td>2907.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66-75</th>\n",
              "      <td>17099667</td>\n",
              "      <td>2029792</td>\n",
              "      <td>60767.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76-85</th>\n",
              "      <td>5548394</td>\n",
              "      <td>688216</td>\n",
              "      <td>19756.0</td>\n",
              "      <td>1996.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86-95</th>\n",
              "      <td>1238198</td>\n",
              "      <td>178416</td>\n",
              "      <td>998.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96-105</th>\n",
              "      <td>301852</td>\n",
              "      <td>46366</td>\n",
              "      <td>3991.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116-125</th>\n",
              "      <td>230</td>\n",
              "      <td>998</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d63fdc35-5825-4d7d-972c-9718aa9a3cb8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d63fdc35-5825-4d7d-972c-9718aa9a3cb8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d63fdc35-5825-4d7d-972c-9718aa9a3cb8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-633929d4-3f84-44ee-894c-911ca664e683\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-633929d4-3f84-44ee-894c-911ca664e683')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-633929d4-3f84-44ee-894c-911ca664e683 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_97e5007a-2407-4206-8bc0-eb314c870ee2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df3')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_97e5007a-2407-4206-8bc0-eb314c870ee2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df3');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df3",
              "summary": "{\n  \"name\": \"df3\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"96-105\",\n          \"86-95\",\n          \"-4-5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44388922,\n        \"min\": 230,\n        \"max\": 135037789,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          301852,\n          1238198,\n          135037789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5416434,\n        \"min\": 998,\n        \"max\": 14935752,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          46366,\n          178416,\n          14935752\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 168988.78907920056,\n        \"min\": 998.0,\n        \"max\": 487010.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          293418.0,\n          232455.0,\n          998.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sum of Crm Cd 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4417.903150817138,\n        \"min\": 1996.0,\n        \"max\": 14918.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7807.0,\n          8931.0,\n          2994.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "saqzhI-v0MXO",
        "outputId": "fa610e3a-d35d-401b-860a-7bba79fe4dd6"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='age'>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.plot(kind = 'line',subplots = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 500
        },
        "id": "0R_B8yWs0mED",
        "outputId": "e9215f72-1332-42d1-f861-3db1704ed2f7"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([<Axes: xlabel='age'>, <Axes: xlabel='age'>, <Axes: xlabel='age'>,\n",
              "       <Axes: xlabel='age'>], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 59
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "ddWyRdkQ0vkb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df3.plot(kind = 'bar', stacked = True, title = 'age vs crime rating' )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 533
        },
        "id": "Q5eA8FQ04fHR",
        "outputId": "0a9fc9fe-bafd-4268-8e28-1d3570e5c414"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'age vs crime rating'}, xlabel='age'>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3['Sum of Crm Cd 1'].plot(kind = 'bar', stacked = True, title = 'age vs crime rating 1' )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 533
        },
        "id": "SI2rdhfC42Zk",
        "outputId": "7406bbdf-4346-438e-ec2e-3ce696802c48"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'age vs crime rating 1'}, xlabel='age'>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.plot.scatter(x = 'Sum of Crm Cd 1', y ='Sum of Crm Cd 4' , s= 500 ,c = 'red')# correllation btw crime 1 and 4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "HDAtgMK66DU0",
        "outputId": "fe6b53b2-28b6-4300-fcc2-8aa93597f8ee"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Sum of Crm Cd 1', ylabel='Sum of Crm Cd 4'>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlIAAAGwCAYAAABiu4tnAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABOAklEQVR4nO3de1wU9f4/8NeyLIu3BdS4GXK0VNS8YiGZ3SSwPJVlR0WOGpKXwsq8e8rUrCTSrpK3Y+I538y0n1qpKeSNUjIDETQlK7yULHQUdtEEFvbz+2NicwWVHXZ3duH1fDz28XBnPjuf94y6+9rPznxGJYQQICIiIiKbeShdABEREZG7YpAiIiIikolBioiIiEgmBikiIiIimRikiIiIiGRikCIiIiKSiUGKiIiISCZPpQtoLMxmM86dO4dWrVpBpVIpXQ4RERHVgxACZWVlCA4OhoeH7eNLDFJ2cu7cOYSEhChdBhEREclw9uxZ3HzzzTa/jkHKTlq1agVA+ovQ6XQKV0NE1AiZTMDRo0BODnDkCKDXA5WVgJcXEBgI9OoF9O4N3HYboNEoXS25CaPRiJCQEMvnuK0YpOyk5uc8nU7HIEVEZE+nTwMrVgDLlwMlJdIyjUYKVjU0GmDNGunPfn7ApEnAxIlAaKjz6yW3JPe0HJ5sTkRErslgAMaPBzp0AJKT/wpRgHWIuvp5SYnUvkMH6fVGo3PqpSaJQYqIiFxPWhoQFiaNMgkBVFfb9vrqaul1a9ZI20lLc0yd1OQxSBERkWtZuhSIiQGKi20PUFerrgaKiqTtpaTYpz6iKzBIERGR60hJAZ59Vvqz2WyfbdZsZ/JkhimyOwYpIiJyDWlpUthxpMmT+TMf2RWDFBERKc9gAMaOBWRMiGgTDw/gySd5AjrZDYMUEREpb/p04Pff7fdz3rWYzdK5V9OmObYfajIYpIiISFmnTgGrVzf8xPL6qq6W+jt92jn9UaPGIEVERMpaudLxP+ldzcND6peogRikiIhIOSaTNGO5s0ajalRXA8uW1Z7Yk8hGDFJERKSc3FzrGcudqaQEyMtTpm9qNBikiIhIOVlZTbt/cnsMUkREpJzsbOmGw0rQaBikqMEYpIiISDmFhcqdp2QyAXq9Mn1To8EgRUREyqmoULb/8nJl+ye3xyBFRETK0WqV7d/bW9n+ye0xSBERkXKCgpQ9RyowUJm+qdFgkCIiIuX07avsOVLh4cr0TY0GgxQRESlH6SCjdP/k9hikiIhIOT17An5+yvTt5wf06KFM39RoMEgREZFyNBpg0iRArXZuv2o18PTTyp2fRY0GgxQRESlr4kTAbHZun2YzMGGCc/ukRolBioiIlBUaCiQkOG9USq2W+gsNdU5/1KgxSBERkfKWLAH8/QEPB38seXhI/SxZ4th+qMlgkCIiIuXpdEBqquN/4jObpX50Osf2Q00GgxQREbmG6Ghg6VLH9pGSIvVDZCcMUkRE5DoSE/8KU/b6ma9mOykpwDPP2GebRH9ikCIiIteSmAjs3AkEBDT8BHS1WtrOzp0MUeQQDFJEROR6oqOB48eB+HhApbI9UKnV0uvi44ETJ/hzHjkMgxQREbkmHx9g1SqgoACYNct6BvSrJ9K88rmfn9S+oEB6PU8sJwdSCSGE0kU0BkajET4+PjAYDNDxPy0Rkf2ZTEBeHpCVJT30eqC8HPD2BgIDpfvmhYdLt33hjOVUTw39/GaQshMGKSIiIvfT0M9v/rRHREREJBODFBEREZFMigapjIwMPPzwwwgODoZKpcKWLVuu2XbSpElQqVR45513rJZfuHABcXFx0Ol08PX1RUJCAi5evGjVJjc3FwMHDoS3tzdCQkKQnJxca/sbN25EWFgYvL290aNHD2zfvt0eu0hERESNmKJB6tKlS+jVqxdSUlKu227z5s349ttvERwcXGtdXFwcjh07hvT0dGzduhUZGRmYcMUdvY1GI6KjoxEaGoqsrCy8+eabmD9/PlauXGlpc+DAAcTGxiIhIQGHDx/G0KFDMXToUBw9etR+O0tERESNj3ARAMTmzZtrLf/1119Fu3btxNGjR0VoaKh4++23Let++OEHAUAcOnTIsuzLL78UKpVK/Pbbb0IIIT744APh5+cnKioqLG1mzZolunTpYnk+fPhwMWTIEKt+IyIixMSJE+tdv8FgEACEwWCo92uIiIhIWQ39/Hbpc6TMZjNGjx6NGTNmoHv37rXWZ2ZmwtfXF/369bMsi4qKgoeHBw4ePGhpc/fdd8PLy8vSJiYmBvn5+SgpKbG0iYqKstp2TEwMMjMzr1lbRUUFjEaj1YOIiIiaFpcOUm+88QY8PT3x3HPP1bler9fD39/fapmnpydat24NvV5vaRMQEGDVpub5jdrUrK/LokWL4OPjY3mEhITYtnNERETk9lw2SGVlZeHdd99FamoqVCqV0uXUMmfOHBgMBsvj7NmzSpdERERETuayQerrr79GcXEx2rdvD09PT3h6euL06dOYNm0a/va3vwEAAgMDUVxcbPW6qqoqXLhwAYGBgZY2RUVFVm1qnt+oTc36umi1Wuh0OqsHERERNS0uG6RGjx6N3Nxc5OTkWB7BwcGYMWMGdu7cCQCIjIxEaWkpsrKyLK/bvXs3zGYzIiIiLG0yMjJgMpksbdLT09GlSxf4/XnfpsjISOzatcuq//T0dERGRjp6N4mIiMiNeSrZ+cWLF/HTTz9ZnhcUFCAnJwetW7dG+/bt0aZNG6v2Go0GgYGB6NKlCwCga9euGDx4MMaPH4/ly5fDZDJh8uTJGDlypGWqhFGjRmHBggVISEjArFmzcPToUbz77rt4++23Ldt9/vnncc8992DJkiUYMmQI1q9fj++//95qigQiIiKiWux8FaFN9uzZIwDUeowdO7bO9ldPfyCEEOfPnxexsbGiZcuWQqfTifj4eFFWVmbV5siRI+Kuu+4SWq1WtGvXTiQlJdXa9oYNG0Tnzp2Fl5eX6N69u9i2bZtN+8LpD4iIiNxPQz+/edNiO+FNi4mIiNwPb1pMREREpBAGKSIiIiKZGKSIiIiIZGKQIiIiIpKJQYqIiIhIJgYpIiIiIpkYpIiIiIhkYpAiIiIikolBioiIiEgmBikiIiIimRikiIiIiGRikCIiIiKSiUGKiIiISCYGKSIiIiKZGKSIiIiIZGKQIiIiIpKJQYqIiIhIJgYpIiIiIpkYpIiIiIhkYpAiIiIikolBioiIiEgmBikiIiIimRikiIiIiGRikCIiIiKSiUGKiIiISCYGKSIiIiKZGKSIiIiIZGKQIiIiIpKJQYqIiIhIJgYpIiIiIpkYpIiIiIhkYpAiIiIikolBioiIiEgmBikiIiIimRikiIiIiGRikCIiIiKSiUGKiIiISCYGKSIiIiKZGKSIiIiIZGKQIiIiIpKJQYqIiIhIJkWDVEZGBh5++GEEBwdDpVJhy5YtlnUmkwmzZs1Cjx490KJFCwQHB2PMmDE4d+6c1TYuXLiAuLg46HQ6+Pr6IiEhARcvXrRqk5ubi4EDB8Lb2xshISFITk6uVcvGjRsRFhYGb29v9OjRA9u3b3fIPhMREVHjoWiQunTpEnr16oWUlJRa6/744w9kZ2dj7ty5yM7OxqZNm5Cfn49HHnnEql1cXByOHTuG9PR0bN26FRkZGZgwYYJlvdFoRHR0NEJDQ5GVlYU333wT8+fPx8qVKy1tDhw4gNjYWCQkJODw4cMYOnQohg4diqNHjzpu54mIiMjtqYQQQukiAEClUmHz5s0YOnToNdscOnQId9xxB06fPo327dvj+PHj6NatGw4dOoR+/foBAHbs2IGHHnoIv/76K4KDg7Fs2TK8+OKL0Ov18PLyAgDMnj0bW7ZswYkTJwAAI0aMwKVLl7B161ZLX/3790fv3r2xfPnyetVvNBrh4+MDg8EAnU4n8ygQERGRMzX089utzpEyGAxQqVTw9fUFAGRmZsLX19cSogAgKioKHh4eOHjwoKXN3XffbQlRABATE4P8/HyUlJRY2kRFRVn1FRMTg8zMzGvWUlFRAaPRaPUgIiKipsVtglR5eTlmzZqF2NhYS2LU6/Xw9/e3aufp6YnWrVtDr9db2gQEBFi1qXl+ozY16+uyaNEi+Pj4WB4hISEN20EiIiJyO24RpEwmE4YPHw4hBJYtW6Z0OQCAOXPmwGAwWB5nz55VuiQiIiJyMk+lC7iRmhB1+vRp7N692+r3y8DAQBQXF1u1r6qqwoULFxAYGGhpU1RUZNWm5vmN2tSsr4tWq4VWq5W/Y0REROT2XHpEqiZEnTx5El999RXatGljtT4yMhKlpaXIysqyLNu9ezfMZjMiIiIsbTIyMmAymSxt0tPT0aVLF/j5+Vna7Nq1y2rb6enpiIyMdNSuERERUSOgaJC6ePEicnJykJOTAwAoKChATk4Ozpw5A5PJhCeeeALff/89PvroI1RXV0Ov10Ov16OyshIA0LVrVwwePBjjx4/Hd999h/3792Py5MkYOXIkgoODAQCjRo2Cl5cXEhIScOzYMXzyySd49913MXXqVEsdzz//PHbs2IElS5bgxIkTmD9/Pr7//ntMnjzZ6ceEiIiI3IhQ0J49ewSAWo+xY8eKgoKCOtcBEHv27LFs4/z58yI2Nla0bNlS6HQ6ER8fL8rKyqz6OXLkiLjrrruEVqsV7dq1E0lJSbVq2bBhg+jcubPw8vIS3bt3F9u2bbNpXwwGgwAgDAaDrGNBREREztfQz2+XmUfK3XEeKSIiIvfTpOaRIiIiInIlDFJEREREMjFIEREREcnEIEVEREQkE4MUERERkUwMUkREREQyMUgRERERycQgRURERCQTgxQRERGRTAxSRERERDIxSBERERHJxCBFREREJBODFBEREZFMDFJEREREMjFIEREREcnEIEVEREQkE4MUERERkUwMUkREREQyMUgRERERycQgRURERCQTgxQRERGRTAxSRERERDIxSBERERHJxCBFREREJBODFBEREZFMDFJEREREMjFIEREREcnEIEVEREQkU4ODVGpqKgwGgz1qISIiInIrDQ5SEyZMwLlz5+xRCxEREZFb8axvw9atW9e5vKqqCpGRkfDwkDLZhQsX7FMZERERkYurd5AymUy455578I9//MOyTAiBp556CjNnzkS7du0cUiARERGRq1IJIUR9Gv70008YNWoUunbtipSUFLRs2RIAoNFocOTIEXTr1s2hhbo6o9EIHx8fGAwG6HQ6pcshIiKiemjo53e9z5G69dZbceDAAQQGBqJ3797Yv3+/zZ0RERERNSb1/mkPADw9PfHGG28gJiYGo0aNQlxcHFQqlaNqIyIiInJpsq7au//++5GdnY0TJ06gRYsWUKvV9q6LiIiIyOXZNCJ1pTZt2mDTpk32rIWIiIjIrXBmcyIiIiKZGKSIiIiIZGKQIiIiIpKJQYqIiIhIJkWDVEZGBh5++GEEBwdDpVJhy5YtVuuFEHj55ZcRFBSEZs2aISoqCidPnrRqc+HCBcTFxUGn08HX1xcJCQm4ePGiVZvc3FwMHDgQ3t7eCAkJQXJycq1aNm7ciLCwMHh7e6NHjx7Yvn273feXiIiIGpd6XbX3+OOP13uDtlzJd+nSJfTq1Qvjxo2rs4/k5GS89957WLt2LTp06IC5c+ciJiYGP/zwA7y9vQEAcXFxKCwsRHp6OkwmE+Lj4zFhwgSsW7cOgDRjaXR0NKKiorB8+XLk5eVh3Lhx8PX1xYQJEwAABw4cQGxsLBYtWoS///3vWLduHYYOHYrs7Gzcdttt9d4fIiIialrqdYuY+Ph4y5+FENi8eTN8fHzQr18/AEBWVhZKS0vx+OOPY82aNfIKUamwefNmDB061NJPcHAwpk2bhunTpwMADAYDAgICkJqaipEjR+L48ePo1q0bDh06ZKllx44deOihh/Drr78iODgYy5Ytw4svvgi9Xg8vLy8AwOzZs7FlyxacOHECADBixAhcunQJW7dutdTTv39/9O7dG8uXL69X/bxFDBERkftxyi1i1qxZY3kEBARg+PDhKCgowKZNm7Bp0yb88ssvGDlyJNq2bWtzAddSUFAAvV6PqKgoyzIfHx9EREQgMzMTAJCZmQlfX19LiAKAqKgoeHh44ODBg5Y2d999tyVEAUBMTAzy8/NRUlJiaXNlPzVtavqpS0VFBYxGo9WDiIiImhabz5H68MMPMX36dKvZzNVqNaZOnYoPP/zQboXp9XoAQEBAgNXygIAAyzq9Xg9/f3+r9Z6enmjdurVVm7q2cWUf12pTs74uixYtgo+Pj+UREhJi6y4SERGRm7M5SFVVVVl+ErvSiRMnYDab7VKUO5gzZw4MBoPlcfbsWaVLIiIiIiez+RYx8fHxSEhIwM8//4w77rgDAHDw4EEkJSVZnUvVUIGBgQCAoqIiBAUFWZYXFRWhd+/eljbFxcVWr6uqqsKFCxcsrw8MDERRUZFVm5rnN2pTs74uWq0WWq1Wxp4RERFRY2HziNTixYsxc+ZMLFmyBHfffTfuvvtuvPXWW5gxYwbefPNNuxXWoUMHBAYGYteuXZZlRqMRBw8eRGRkJAAgMjISpaWlyMrKsrTZvXs3zGYzIiIiLG0yMjJgMpksbdLT09GlSxf4+flZ2lzZT02bmn6IiIiI6iQawGAwCIPBIPv1ZWVl4vDhw+Lw4cMCgHjrrbfE4cOHxenTp4UQQiQlJQlfX1/x2WefidzcXPHoo4+KDh06iMuXL1u2MXjwYNGnTx9x8OBB8c0334hOnTqJ2NhYy/rS0lIREBAgRo8eLY4ePSrWr18vmjdvLlasWGFps3//fuHp6SkWL14sjh8/LubNmyc0Go3Iy8uz6VgAaNDxICIiIudq6Od3vYPUH3/8IT777DNhNBrrLOKzzz4T5eXlNnW+Z88eAaDWY+zYsUIIIcxms5g7d64ICAgQWq1WDBo0SOTn51tt4/z58yI2Nla0bNlS6HQ6ER8fL8rKyqzaHDlyRNx1111Cq9WKdu3aiaSkpFq1bNiwQXTu3Fl4eXmJ7t27i23bttm0LwxSRERE7qehn9/1mkcKAN599118/vnntX4CqxEVFYXHHnsMiYmJdhgncz+cR4qIiMj9OGUeKQD46KOPMGXKlGuunzJlCtauXWtzAURERETuqt5B6uTJk+jVq9c11/fs2bPWffCIiIiIGrN6B6mqqir8/vvv11z/+++/o6qqyi5FEREREbmDes8j1b17d3z11VcIDw+vc31aWhq6d+9ut8KIqIkwmYDcXCArC8jOBgoLgYoKQKsFgoKAvn2B8HCgZ09Ao1G6WiIiK/UOUuPGjcPUqVPRvXt3/P3vf7da98UXX+C1117DW2+9ZfcCiaiROn0aWLECWL4c+PO+l9BopGBVQ6OR2gCAnx8waRIwcSIQGur8eomI6lDvq/YA4J///CfWrVuHsLAwdOnSBYB0a5gff/wRw4cPx8cff+ywQl0dr9qjJqUho0gGAzB9OrB6NeDhAVRX179ftRowm4GEBGDJEsAV/69xhI3IrTT089umIAUAGzZswLp163Dy5EkIIdC5c2eMGjUKw4cPt7nzxoRBipqE+o4i1Ty/ehQpLQ0YOxb4/XfbAtTV1GrA3x9ITQWio+Vvx54aemyISBFOD1JUNwYpatTsMYrUvz+QmSm93h43OK/ZztKlgJLz1zX2ETaiRs5p80gRUROVlgaEhQFr1gBC2D6SVF0tvS4zU3pujxB15XYmTwZSUuyzTVvZ69isWSNtJy3NMXUSkcMwSBHRtS1dCsTEAMXFDfspztEmT3Z+CLHnsamuBoqKpO0pFQqJSBYGKSKqW0oK8Oyz0p/tNYrkKB4ewJNPAkajc/pzxLFxhRE2IrIZgxQR1ZaWJn2guwuzWRoZmjbN8X0549goMcJGRLIwSBGRNYNBurLOw83eHqqrpRO+T592XB/OOjbOHmEjItnqPSFnjfLycrz//vvYs2cPiouLYb5qWDs7O9tuxRGRAqZPl6YncPWf8+ri4QGsXAm89ppjtu+sY3PlCNuqVY7ti4gaxObpD+Li4pCWloYnnngCAQEBUKlUVuvnzZtn1wLdBac/oEbh1CmgY0fpSjJ35ecnnbht78kulTg2KhVQUMB5pogcqKGf3zaPSG3duhXbt2/HgAEDbO6MiFzcypW2z4XkakpKgLw8aQZxe1Li2Dh6hI2IGszmH/rbtWuHVq1aOaIWIlKSySTNyu3OIapGVpZ9t6fUsamuBpYts54dnYhcis1BasmSJZg1axZOO/KETiJyvtzcv25t4s40GvsHKSWPTc0IGxG5JJt/2uvXrx/Ky8vRsWNHNG/eHJqrzkO4cOGC3YojIieyd/hQiskE6PX23abSxyYry/4/VRKRXdgcpGJjY/Hbb7/h9ddfr/NkcyJyU9nZtW+y667Ky+27PSWPTc0I2/jxzu+biG7I5iB14MABZGZmolevXo6oh4iUUljYOEIUAHh723d7Sh4bR4ywEZHd2HyOVFhYGC5fvuyIWohISRUVSldgHxoNEBho320qfWzsPcJGRHZjc5BKSkrCtGnTsHfvXpw/fx5Go9HqQURuSqtVugL7MJmA8HD7blPpY2PvETYishubf9obPHgwAGDQoEFWy4UQUKlUqG4Ml04TNUVBQY3nHCl7Byklj40jRtiIyG5sDlJ79uxxRB1EpLS+fYEVK5SuouH8/IAePey7TSWPjSNG2IjIbmwKUiaTCa+88gqWL1+OTp06OaomIlJCY/iwVquBp5+2/+1hlD42SvdPRNdk0zlSGo0Gubm5jqqFiJTUs6c0muPOzGZgwgT7b1fJY+OIETYishubTzb/5z//idWrVzuiFiJSkkYDTJokjeq4I7UaSEhwzA1+lTo2jhphIyK7UQlh263Mn332WfznP/9Bp06dEB4ejhYtWlitf+utt+xaoLto6N2jiVzC6dNAhw6AbW8LyvPwAAICgBMnAEf9/1Pi2KhUQEGBY8IhEQFo+Oe3zSebHz16FH3/vFXBjz/+aLWOs5wTubnQUGlUZ80a97p5sdkMpKY6LkQBzj82ajUQH88QReTibB6RorpxRIoaDaMRCAsDioqkgOIOUlKAZ55xfD/OOjbOGGEjIgAN//yu9zlS1dXVyM3NrXNW88uXLyM3Nxdmd3nTJaJr0+mk0R1X///s8efbl7NCFOC8Y+OMETYisot6B6n//ve/GDduHLy8vGqt02g0GDduHNatW2fX4ohIIdHRwNKlSldxbWq1NGKzc6fzQlQNZxyblBSpHyJyefUOUqtXr8b06dOhruOqFU9PT8ycORMrV660a3FEpKDExL8Cg4fNF/jWrWY7d94pnUht61VwarX0uvh46WcvpcKGI4+NM0fYiKjB6n2yeX5+Pvr373/N9bfffjuOHz9ul6JIBpMJyM0FsrKA7GzpbvUVFdI9woKCpJmZw8Ol+XB4KTXVV2Ii0KkT8OSTQHFxw06yVqsBf3/pJ6voaOkquJUrgWXLgJISqc3Vt2G58rmfnzQVwIQJrnECtiOPDRG5jXqfbN6iRQtkZmaiZ8+eda7Pzc1FZGQkLl26ZNcC3YViJ5ufPi3dumL58vp/GE2aBEyc6BofRuQeDAZg+nRg9Wpp5MSW0KBWS+f8JCQAS5bUPu/HZALy8qQvAVlZgF4PlJdLN+oNDJS+AISHS5NSuuKXAEceGyJyuIZ+ftc7SPXu3RuTJk3CpEmT6lz/wQcfYOXKlcjJybG5iMbA6UGKb96kBHcfRXIkHhsit+S0IJWcnIzk5GTs3r271qjUkSNHMGjQIMycORMzZ860uYjGwKlBKi0NGDsW+P13/pxAynD3USRH4rEhcitOC1ImkwnR0dH45ptvEBUVhbCwMADAiRMn8NVXX2HAgAFIT0+Hpom+MTgtSC1dCjz7rDQKZY9LsGu2s3SpdM4HERFRE+K0IAVIYertt9/GunXrcPLkSQgh0LlzZ4waNQpTpkypc2qEpsIpQSolBZg82THbBhimiIioyXFqkKJrc3iQSksDYmLsv92r7dzJn/mIiKjJcNrM5kqorq7G3Llz0aFDBzRr1gy33HILFi5ciCuznxACL7/8MoKCgtCsWTNERUXh5MmTVtu5cOEC4uLioNPp4Ovri4SEBFy8eNGqTW5uLgYOHAhvb2+EhIQgOTnZKftYLwaDdE6UvearuRYPD+lSbqPRsf0QERE1Ei4dpN544w0sW7YMS5cuxfHjx/HGG28gOTkZ77//vqVNcnIy3nvvPSxfvhwHDx5EixYtEBMTg/LyckubuLg4HDt2DOnp6di6dSsyMjIwYcIEy3qj0Yjo6GiEhoYiKysLb775JubPn+86E4xOny6dWO6M21IUFwPTpjm2HyIiosZCuLAhQ4aIcePGWS17/PHHRVxcnBBCCLPZLAIDA8Wbb75pWV9aWiq0Wq34+OOPhRBC/PDDDwKAOHTokKXNl19+KVQqlfjtt9+EEEJ88MEHws/PT1RUVFjazJo1S3Tp0qXetRoMBgFAGAwG23f0egoKhFCphACc91CphDh1yr77QURE5IIa+vldrxEpo0I/9dx5553YtWsXfvzxRwDSNAvffPMNHnzwQQBAQUEB9Ho9oqKiLK/x8fFBREQEMjMzAQCZmZnw9fVFv379LG2ioqLg4eGBgwcPWtrcfffdVifLx8TEID8/HyU188FcpaKiAkaj0erhECtXOv4nvat5eEj9EhER0XXV6xPaz88PxcXFAID7778fpaWljqzJYvbs2Rg5ciTCwsKg0WjQp08fTJkyBXFxcQAAvV4PAAgICLB6XUBAgGWdXq+Hv7+/1XpPT0+0bt3aqk1d27iyj6stWrQIPj4+lkdISEgD97YOJpM0Y3lD5oqSo7pamlTwyokEiYiIqJZ6BamWLVvi/PnzAIC9e/fC5KQP2A0bNuCjjz7CunXrkJ2djbVr12Lx4sVYu3atU/q/njlz5sBgMFgeZ8+etX8nubl/zZDsbCUl0qSCREREdE31umlxVFQU7rvvPnTt2hUA8Nhjj11zzqjdu3fbrbgZM2ZYRqUAoEePHjh9+jQWLVqEsWPHIjAwEABQVFSEoKAgy+uKiorQu3dvAEBgYKBlNK1GVVUVLly4YHl9YGAgioqKrNrUPK9pczWtVgutVtvwnbyerCzHbr8+/fftq2wNRERELqxeI1L/93//h/nz51vOM+revTt69epV58Oe/vjjD3hcdX6QWq2G+c+r1zp06IDAwEDs2rXLst5oNOLgwYOIjIwEAERGRqK0tBRZV4SS3bt3w2w2IyIiwtImIyPDaqQtPT0dXbp0gZ+fn133ySbZ2crdQkKjUT7IERERuTpbz06/9957RUlJiawz2201duxY0a5dO7F161ZRUFAgNm3aJNq2bStmzpxpaZOUlCR8fX3FZ599JnJzc8Wjjz4qOnToIC5fvmxpM3jwYNGnTx9x8OBB8c0334hOnTqJ2NhYy/rS0lIREBAgRo8eLY4ePSrWr18vmjdvLlasWFHvWh1y1d4jjzj3ar2rH48+ar99ISIickEN/fxu0PQHZrNZmM3mhmziuoxGo3j++edF+/bthbe3t+jYsaN48cUXraYpMJvNYu7cuSIgIEBotVoxaNAgkZ+fb7Wd8+fPi9jYWNGyZUuh0+lEfHy8KCsrs2pz5MgRcddddwmtVivatWsnkpKSbKrVIUEqJkbZIBUTY799ISIickEN/fyWdYuY//znP3jzzTctM4h37twZM2bMwOjRo+06WuZOHHKLmEcfBT7/3D7bktv/li3K9U9ERORgDf38rtfJ5ld66623MHfuXEyePBkDBgwAAHzzzTeYNGkS/ve//+GFF16wuQi6hqAg6VwlJaYh0GiAa5xoT0RERBKbg9T777+PZcuWYcyYMZZljzzyCLp374758+czSNlT377AihXK9G0yAeHhyvRNRETkJmyeMruwsBB33nlnreV33nknCgsL7VIU/UnpIKN0/0RERC7O5iB16623YsOGDbWWf/LJJ+jUqZNdiqI/9ewJKDX9gp8f0KOHMn0TERG5CZt/2luwYAFGjBiBjIwMyzlS+/fvx65du+oMWNQAGg0waRKQnOzc28So1cDTTys3hxUREZGbsHlEatiwYTh48CDatm2LLVu2YMuWLWjbti2+++47PPbYY46osWmbOBH4cwJSpzGbgQkTnNsnERGRG7J5RAoAwsPD8X//93/2roXqEhoKJCQAa9Y4Z1RKrQbi46V+iYiI6LpsHpEiBSxZAvj7Ax4O/uvy8JD6WbLEsf0QERE1EgxS7kCnA1JTHf8Tn9ks9WOvCUWJiIgaOQYpdxEdDSxd6tg+UlKkfoiIiKheGKTcSWLiX2HKXj/z1WwnJQV45hn7bJOIiKiJYJByN4mJwM6dQECAdGJ4Q6jV0nZ27mSIIiIiksHmq/bKy8vx/vvvY8+ePSguLob5qvN2srOz7VYcXUN0NHD8ODB9OrB6tTSqZMsVfWq1dD5UfLx0YjnPiSIiIpLF5iCVkJCAtLQ0PPHEE7jjjjugUqkcURfdiI8PsGoV8NJLwMqVwLJlQEmJtO7qGx1f+dzPT5psc8IETnFARETUQCohhLDlBT4+Pti+fbtlVnOSGI1G+Pj4wGAwQKfECI/JBOTlAVlZ0kOvB8rLAW9vIDBQum9eeLh02xfOWE5ERASg4Z/fNo9ItWvXDq1atbK5I3IwjQbo21d6jB+vdDVERERNgs0nmy9ZsgSzZs3C6dOnHVEPERERkduweUSqX79+KC8vR8eOHdG8eXNorvqZ6MKFC3YrjoiIiMiV2RykYmNj8dtvv+H1119HQEAATzYnIiKiJsvmIHXgwAFkZmaiV69ejqiHiIiIyG3YfI5UWFgYLl++7IhaiIiIiNyKzUEqKSkJ06ZNw969e3H+/HkYjUarBxEREVFTYfM8Uh5/3pvt6nOjhBBQqVSotmWG7UZE8XmkiIiIyGZOn0dqz549NndCRERE1BjZHKTuueceR9RBRERE5HZsDlIZGRnXXX/33XfLLoaIiIjIndgcpO69995ay648X6qpniNFRERETY/NV+2VlJRYPYqLi7Fjxw7cfvvtSEtLc0SNRERERC7J5hEpHx+fWsseeOABeHl5YerUqcjKyrJLYURERESuzuYRqWsJCAhAfn6+vTZHRERE5PJsHpHKzc21ei6EQGFhIZKSktC7d2971UVERETk8mwOUr1794ZKpcLV83j2798fH374od0KIyIiInJ1NgepgoICq+ceHh646aab4O3tbbeiiIiIiNyBzUEqNDTUEXUQERERuZ16n2yemZmJrVu3Wi37z3/+gw4dOsDf3x8TJkxARUWF3QskIiIiclX1DlKvvPIKjh07Znmel5eHhIQEREVFYfbs2fjiiy+waNEihxRJRERE5IrqHaRycnIwaNAgy/P169cjIiICq1atwtSpU/Hee+9hw4YNDimSiIiIyBXVO0iVlJQgICDA8nzfvn148MEHLc9vv/12nD171r7VEREREbmwegepgIAAyxV7lZWVyM7ORv/+/S3ry8rKoNFo7F8hERERkYuqd5B66KGHMHv2bHz99deYM2cOmjdvjoEDB1rW5+bm4pZbbnFIkURERESuqN7THyxcuBCPP/447rnnHrRs2RJr166Fl5eXZf2HH36I6OhohxRJRERE5IrqPSLVtm1bZGRkoKSkBCUlJXjssces1m/cuBHz5s2ze4G//fYb/vnPf6JNmzZo1qwZevToge+//96yXgiBl19+GUFBQWjWrBmioqJw8uRJq21cuHABcXFx0Ol08PX1RUJCAi5evGjVJjc3FwMHDoS3tzdCQkKQnJxs930hIiKixsXmmxb7+PhArVbXWt66dWurESp7KCkpwYABA6DRaPDll1/ihx9+wJIlS+Dn52dpk5ycjPfeew/Lly/HwYMH0aJFC8TExKC8vNzSJi4uDseOHUN6ejq2bt2KjIwMTJgwwbLeaDQiOjoaoaGhyMrKwptvvon58+dj5cqVdt0fIiIialxU4uqb5rmQ2bNnY//+/fj666/rXC+EQHBwMKZNm4bp06cDAAwGAwICApCamoqRI0fi+PHj6NatGw4dOoR+/foBAHbs2IGHHnoIv/76K4KDg7Fs2TK8+OKL0Ov1ljA4e/ZsbNmyBSdOnKhXrUajET4+PjAYDNDpdHbYeyIiInK0hn5+2zwi5Uyff/45+vXrh3/84x/w9/dHnz59sGrVKsv6goIC6PV6REVFWZb5+PggIiICmZmZAKQZ2X19fS0hCgCioqLg4eGBgwcPWtrcfffdViNqMTExyM/PR0lJSZ21VVRUwGg0Wj2IiIioaXHpIPXLL79g2bJl6NSpE3bu3Imnn34azz33HNauXQsA0Ov1AGA1v1XN85p1er0e/v7+Vus9PT3RunVrqzZ1bePKPq62aNEi+Pj4WB4hISEN3FsiIiJyNy4dpMxmM/r27YvXX38dffr0wYQJEzB+/HgsX75c6dIwZ84cGAwGy4OTkRIRETU9Lh2kgoKC0K1bN6tlXbt2xZkzZwAAgYGBAICioiKrNkVFRZZ1gYGBKC4utlpfVVWFCxcuWLWpaxtX9nE1rVYLnU5n9SAiIqKmxaWD1IABA5Cfn2+17Mcff0RoaCgAoEOHDggMDMSuXbss641GIw4ePIjIyEgAQGRkJEpLS5GVlWVps3v3bpjNZkRERFjaZGRkwGQyWdqkp6ejS5cuVlcIEhEREV3JpYPUCy+8gG+//Ravv/46fvrpJ6xbtw4rV65EYmIiAEClUmHKlCl49dVX8fnnnyMvLw9jxoxBcHAwhg4dCkAawRo8eDDGjx+P7777Dvv378fkyZMxcuRIBAcHAwBGjRoFLy8vJCQk4NixY/jkk0/w7rvvYurUqUrtOhEREbkD4eK++OILcdtttwmtVivCwsLEypUrrdabzWYxd+5cERAQILRarRg0aJDIz8+3anP+/HkRGxsrWrZsKXQ6nYiPjxdlZWVWbY4cOSLuuusuodVqRbt27URSUpJNdRoMBgFAGAwGeTtKRERETtfQz2+XnkfKnXAeKSIiIvfTqOeRIiIiInJlDFJEREREMjFIEREREcnEIEVEREQkE4MUERERkUwMUkREREQyMUgRERERycQgRURERCQTgxQRERGRTAxSRERERDIxSBERERHJxCBFREREJBODFBEREZFMDFJEREREMjFIEREREcnEIEVEREQkE4MUERERkUwMUkREREQyMUgRERERycQgRURERCQTgxQRERGRTAxSRERERDIxSBERERHJxCBFREREJBODFBEREZFMDFJEREREMjFIEREREcnEIEVEREQkE4MUERERkUwMUkREREQyMUgRERERycQgRURERCQTgxQRERGRTAxSRERERDIxSBERERHJxCBFREREJBODFBEREZFMDFJEREREMjFIEREREcnEIEVEREQkE4MUERERkUxuFaSSkpKgUqkwZcoUy7Ly8nIkJiaiTZs2aNmyJYYNG4aioiKr1505cwZDhgxB8+bN4e/vjxkzZqCqqsqqzd69e9G3b19otVrceuutSE1NdcIeERERkTtzmyB16NAhrFixAj179rRa/sIL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KCwshI+PT53tKisrkZycjF69eqF58+Zo27YtBgwYgDVr1sBkMjmlViEEVq5ciYiICLRs2RK+vr7o168f3nnnHfzxxx+yt1teXo4nn3wSPXr0gKenJ0MXubQHH3wQr776Kh577LE611dUVGD69Olo164dWrRogYiICOzdu9eyPisrC9XV1Xj11Vdxyy23oG/fvpg+fTpycnLs8n/Zs8FbIKImbdiwYaisrMTatWvRsWNHFBUVYdeuXTh//rzSpdXp559/RteuXXHbbbdds01lZSViYmJw5MgRLFy4EAMGDIBOp8O3336LxYsXo0+fPujdu3edr/Py8rJbraNHj8amTZvw0ksvYenSpbjppptw5MgRvPPOO/jb3/4mOwBVV1ejWbNmeO655/D//t//s1u9REqYPHkyfvjhB6xfvx7BwcHYvHkzBg8ejLy8PHTq1Anh4eHw8PDAmjVr8OSTT+LixYv473//i6ioKGg0moYXIOO+gEREQgghSkpKBACxd+/ea7YpKCgQAMThw4drvW7Pnj1CiL9uNrpjxw7Ru3dv4e3tLe677z5RVFQktm/fLsLCwkSrVq1EbGysuHTp0nVr+vTTT0W3bt2El5eXCA0NFYsXL7asu/rGrde6gekbb7whPDw8RHZ2dq11lZWV4uLFi5btJSYmiueff160adNG3HvvvXbbl08++UQAEFu2bKm1zmw2i9LSUiGEEFVVVeKFF14QPj4+onXr1mLGjBlizJgx9b7RdWO9KTY1TgDE5s2bLc9Pnz4t1Gq1+O2336zaDRo0SMyZM8fyfO/evcLf31+o1WoBQERGRtrt5t78aY+IZGvZsiVatmyJLVu2oKKiosHbmz9/PpYuXYoDBw7g7NmzGD58ON555x2sW7cO27ZtQ1paGt5///1rvj4rKwvDhw/HyJEjkZeXh/nz52Pu3LlITU0FAGzatAnjx49HZGQkCgsLsWnTpjq389FHHyEqKgp9+vSptU6j0aBFixaW52vXroWXlxf279+P5cuX221fPvroI3Tp0gWPPvporXUqlcryk+SSJUuQmpqKDz/8EN988w0uXLiAzZs3X3O7RI1JXl4eqqur0blzZ8v7UcuWLbFv3z78/PPPAAC9Xo/x48dj7NixOHToEPbt2wcvLy888cQTkLJZA9kljhFRk/Xpp58KPz8/4e3tLe68804xZ84cceTIEct6W0akvvrqK0ubRYsWCQDi559/tiybOHGiiImJuWYto0aNEg888IDVshkzZohu3bpZnj///PPXHImq0axZM/Hcc89dt40Q0ohUnz59rJbZa1+6du0qHnnkkRvWEBQUJJKTky3PTSaTuPnmmzkiRY0SrhqRWr9+vVCr1eLEiRPi5MmTVo/CwkIhhBAvvfSS6Nevn9V2zp49KwCIzMzMBtfEESkiapBhw4bh3Llz+PzzzzF48GDs3bsXffv2tYwC2aJnz56WPwcEBKB58+bo2LGj1bLi4uJrvv748eMYMGCA1bIBAwbg5MmTqK6urncdwoZvqeHh4XUub+i+1KcGg8GAwsJCREREWJZ5enqiX79+9SmdyO316dMH1dXVKC4uxq233mr1CAwMBCBdqevhYR131Go1AMBsNje4BgYpImowb29vPPDAA5g7dy4OHDiAJ598EvPmzQMAyxvYlcHgWlfKXHnip0qlqnUiqEqlsssb34107twZJ06cqFfbK3/mu1JD98WWGogas4sXLyInJwc5OTkApOkMcnJycObMGXTu3BlxcXEYM2YMNm3ahIKCAnz33XdYtGgRtm3bBgAYMmQIDh06hFdeeQUnT55EdnY24uPjERoaWufP97ZikCIiu+vWrRsuXboEALjpppsAAIWFhZb1NW+I9ta1a9da0y7s378fnTt3tnwDrY9Ro0bhq6++wuHDh2utM5lMln1zpFGjRuHHH3/EZ599VmudEAIGgwE+Pj4ICgrCwYMHLeuqqqqQlZXl8PqInOX7779Hnz59LKFn6tSp6NOnD15++WUAwJo1azBmzBhMmzYNXbp0wdChQ3Ho0CG0b98eAHD//fdj3bp12LJlC/r06YPBgwdDq9Vix44daNasWYPr4/QHRCTb+fPn8Y9//APjxo1Dz5490apVK3z//fdITk62nCTdrFkz9O/fH0lJSejQoQOKi4vx0ksvOaSeadOm4fbbb8fChQsxYsQIZGZmYunSpfjggw9s2s6UKVOwbds2DBo0CAsXLsRdd91l2bc33ngDq1evrnP6A3saPnw4Nm/ejNjYWLz00kuIjo7GTTfdhLy8PLz99tt49tlnMXToUDz//PNISkpCp06dEBYWhrfeeqtek4z+8MMPqKysxIULF1BWVmYJt47eLyJb3Xvvvdf9qVuj0WDBggVYsGDBNduMHDkSI0eOdER5DFJEJF/Lli0RERGBt99+Gz///DNMJhNCQkIwfvx4/Otf/7K0+/DDD5GQkIDw8HB06dIFycnJiI6Otns9ffv2xYYNG/Dyyy9j4cKFCAoKwiuvvIInn3zSpu1otVqkp6fj7bffxooVKzB9+nQ0b94cXbt2xXPPPXfdOajsRaVSYd26dVi5ciU+/PBDvPbaa/D09ESnTp0wZswYxMTEAJDCY2FhIcaOHQsPDw+MGzcOjz32GAwGw3W3/9BDD+H06dOW5zXf9m05P4yIAJXg/xoiIiIiWXiOFBEREZFMDFJEREREMjFIEREREcnEIEVEREQkE4MUERERkUwMUkREREQyMUgRERERycQgRURERCQTgxQRERGRTAxSRERERDIxSBERERHJ9P8B4z4FpjQV9g8AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.plot.hist(bins = 10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "RLpYeurx-Aoo",
        "outputId": "6021a05e-2e2d-45e0-efff-b8489cfd3cc7"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 51
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.boxplot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "id": "E3TzA2deA5oN",
        "outputId": "762ce6c9-901f-4608-c40b-4ba5e1934c75"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.plot.area(figsize = (10,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "id": "kSAZBNWqC5kY",
        "outputId": "edc5693a-fd26-4ac2-a3d2-1bfcf57d82af"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='age'>"
            ]
          },
          "metadata": {},
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3.plot.pie(y='Sum of Crm Cd 1',figsize = (10,7))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 593
        },
        "id": "naRA69VAFOim",
        "outputId": "a0dbf033-6f2a-4dc3-a5f5-7d5beba33bcd"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Sum of Crm Cd 1'>"
            ]
          },
          "metadata": {},
          "execution_count": 64
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_A-4N4sDGO3G"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}